---
## Configure backuppc user ssh server key in the client

- name: install server ssh key in client
  block: 
  - name: COMMAND | Extract SSH backuppc server pub key
    command: "cat {{ backuppc_server_home }}/.ssh/id_rsa.pub"
    register: cat
    changed_when: false
    delegate_to: "{{ backuppc_server_name }}"

  - name: Add SSH server pub key to client
    authorized_key:
      user: "{{ backuppc_client_user }}"
      state: present
      key: "{{ cat.stdout }}"
  when: backuppc_client

- name: Manage known_hosts keys in backup server
  block: 
  - name: Remove old host domain ssh keys
    known_hosts:
      path: '{{ backuppc_server_home }}/.ssh/known_hosts'
      name: "{{ inventory_hostname }}"
      state: absent

  - name: Remove old host IPv4 ssh keys
    known_hosts:
      path: '{{ backuppc_server_home }}/.ssh/known_hosts'
      name: "{{ IPv4 }}"
      state: absent
    loop: "{{ ansible_facts.all_ipv4_addresses }}"
    loop_control:
      loop_var: IPv4

  - name: Remove old host IPv6 ssh keys
    known_hosts:
      path: '{{ backuppc_server_home }}/.ssh/known_hosts'
      name: "{{ IPv6 }}"
      state: absent
    loop: "{{ ansible_facts.all_ipv6_addresses }}"
    loop_control:
      loop_var: IPv6

  - name: ssh public key of client
    shell: "ssh-keyscan {{ inventory_hostname }}"
    register: ssh_known_host_results
    ignore_errors: yes

  - name: add client key to known_hosts in server
    known_hosts:
      path: '{{ backuppc_server_home }}/.ssh/known_hosts'
      name: "{{ inventory_hostname }}"
      key: "{{ ssh_known_host_results.stdout }}"
      state: present

  delegate_to: "{{ backuppc_server_name }}"
  become_user: "{{ backuppc_client_user }}"